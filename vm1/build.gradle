plugins {
    id 'com.palantir.docker' version '0.35.0'
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example.vm1'
version = '1.0.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    //lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //orm: jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

    // DB
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
    implementation 'com.oracle.database.jdbc:ojdbc11:23.3.0.23.09'
    runtimeOnly 'com.h2database:h2'

    //json
    implementation 'org.json:json:20240303'

    //actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    //prometheus
    implementation 'io.micrometer:micrometer-registry-prometheus'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register("prepareKotlinBuildScriptModel") {
    // 필요한 설정
}

docker {
    println(tasks.bootJar.outputs.files)
    name rootProject.name + '-' + project.name + ":" + version
    println(name)
    dockerfile file('../Dockerfile')
    files tasks.bootJar.outputs.files
    buildArgs(['JAR_FILE': tasks.bootJar.outputs.files.singleFile.name])
}
